buildscript {
  repositories {
    mavenLocal()
    jcenter()
  }
  
  dependencies {
    classpath 'org.akhikhl.unpuzzle:unpuzzle-plugin:0.0.23-SNAPSHOT'
  }
}

apply plugin: 'eclipse'
apply plugin: 'org.akhikhl.unpuzzle'

repositories {
  maven { // HALE artifactory
    url 'http://artifactory.esdi-humboldt.eu/artifactory/libs-release/'
  }
  jcenter()
  maven {
      url 'http://download.osgeo.org/webdav/geotools/'
  }
  maven {
      url 'http://download.java.net/maven/2'
  }
  maven {
      url 'http://repo.opengeo.org'
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.10'
}

unpuzzle {

  // localMavenRepositoryDir = file('build/m2')

  unpuzzleDir = file('build/unpuzzle')

  selectedEclipseVersion = '2.9.5'
  
  def isRelease = false

  eclipseVersion('2.9.5') {
    eclipseMavenGroup = 'eu.esdihumboldt.unpuzzled' // default group
    eclipseMirror = 'http://localhost:8080'
    eclipseArchiveMirror = 'http://localhost:8080'

    sources {
      source "$eclipseMirror/eu.esdihumboldt.hale.all.feature.site-2.9.5.201602141749.zip"
      
      //TODO add delta pack?
    }
  }
  
  artifacts {
    
    //--- duplicates ---
    
    bundle('javax.inject') {
      // instead use javax.inject.javax.inject
      replaceWith 'javax.inject.javax.inject'
    }
    
    bundle('org.slf4j.api') {
      // instead use slf4j.api
      replaceWith 'slf4j.api'
    }
    
    // turn on verifying all artifacts that are not deployed
    // (they should be resolvable through the configured repositories)
    verifyIfNoDeploy = true
    
    // artifact configuration applied to all artifacts
    all {
      // put HALE bundles in a separate group
      if (name.startsWith('eu.esdihumboldt')) {
        group = 'eu.esdihumboldt.hale'
      }
      
      // replace some bundles with already available Maven artifacts
      def mapping
      
      // determine Maven Artifact based on bnd-platform information in bundle
      mapping = project.findBndPlatformArtifactMapping(pom.manifest)
      
      // use bundleArtifactMap as fall-back
      if (!mapping) {
        def bundleArtifactMap = new groovy.json.JsonSlurper().parse(file('bundleArtifactMap.json'))
        mapping = bundleArtifactMap[name]
      }
      
      if (mapping) {
        // apply artifact mapping
        group = mapping.group
        name = mapping.name
        if (mapping.version) {
          version = mapping.version
        }
        else {
          def newVersion = project.findArtifactVersion(version, mapping.versions)
          version = newVersion
        }
        deploy = false
        
        // add "other parts" if bundle was merged with bnd-platform
        otherParts.addAll(project.findOtherMergedParts(pom.manifest));
      }
      else {
        // Eclipse-provided or HALE-built bundle
        
        // for HALE-built bundles, adapt version number as SNAPSHOT/release
        version = adaptHaleBundleVersion(version)
      }
    }
  }

  uploadEclipse = [
    url: 'https://artifactory.wetransform.to/artifactory/libs-release-local',
    snapshotUrl: 'https://artifactory.wetransform.to/artifactory/libs-snapshot-local',
    user: project.hasProperty('wetfArtifactoryUser') ? project.getProperty('wetfArtifactoryUser') : '',
    password: project.hasProperty('wetfArtifactoryPassword') ? project.getProperty('wetfArtifactoryPassword') : ''
  ]
}

// helper methods

/**
 * Determine artifact replacement from bnd-platform information.
 */
def findBndPlatformArtifactMapping(java.util.jar.Manifest manifest) {
  def group, name, version
  
  if (manifest?.attr?.getValue('BndPlatform-MergedArtifacts')) {
    // use first artifact of merged artifacts
    group = manifest?.attr?.getValue('BndPlatform-MergedArtifact-1-Group')
    name = manifest?.attr?.getValue('BndPlatform-MergedArtifact-1-Name')
    version = manifest?.attr?.getValue('BndPlatform-MergedArtifact-1-Version')
  }
  else {
    // use single original artifacts
    group = manifest?.attr?.getValue('BndPlatform-ArtifactGroup')
    name = manifest?.attr?.getValue('BndPlatform-ArtifactName')
    version = manifest?.attr?.getValue('BndPlatform-ArtifactVersion')
  }
  
  if (name && group && version) {
    [name: name, group: group, version: version]
  }
  else {
    null
  }
}

/**
 * Determine additional parts for a bundle originally merged with bnd-platform from
 * multiple Maven artifacts.
 */
def findOtherMergedParts(java.util.jar.Manifest manifest) {
  def result = []
  
  def artifacts = manifest?.attr?.getValue('BndPlatform-MergedArtifacts')
  if (artifacts) {
    def number = artifacts as int
    for (int i = 1; i < number; i++) {
      // iterate over all save the first
      
      int index = i+1
      
      def group = manifest?.attr?.getValue("BndPlatform-MergedArtifact-${index}-Group")
      def name = manifest?.attr?.getValue("BndPlatform-MergedArtifact-${index}-Name")
      def version = manifest?.attr?.getValue("BndPlatform-MergedArtifact-${index}-Version")
      
      if (name && group && version) {
        result << [name: name, group: group, version: version]
      }
    }
  }
  
  result
}

/**
 * Find the artifact version to use from a version mapping part of
 * the bundle artifact map.
 */
def findArtifactVersion(String version, Object versions) {
  // is there a direct mapping?
  String result = versions[version]
  
  String stripped = stripBndQualifier(version)
  if (!result) {
    // is there a mapping with the bnd qualifier excluded?
    result = versions.findResult { bundleVersion, pomVersion ->
      String bundleStripped = stripBndQualifier(bundleVersion)
      if (stripped == bundleStripped) {
        pomVersion
      }
      else {
        null
      }
    }
  }
  
  if (!result) {
    // fall-back to the stripped version
    result = stripped
  }
  
  result
}

String stripBndQualifier(String version) {
  def v = new org.osgi.framework.Version(version)
  def qualifier = v.qualifier
  
  ['i20', 'bnd-', 'v20'].any { prefix ->
    if (qualifier.startsWith(prefix)) {
      qualifier = null
      return true
    }
    
    def inset = '-' + prefix
    def pos = qualifier.indexOf(inset)
    if (pos > 0) {
      qualifier = qualifier.substring(0, pos)
      return true
    }
    
    return false
  }
  
  def v2 = new org.osgi.framework.Version(v.major, v.minor, v.micro, qualifier)
  v2.toString()
}

String stripQualifier(String version) {
  def v = new org.osgi.framework.Version(version)
  def noQualifier = new org.osgi.framework.Version(v.major, v.minor, v.micro)
  noQualifier.toString()
}

/**
 * Adapt version numbers of HALE bundles for publishing to Maven.
 */
String adaptHaleBundleVersion(String version) {
  def v
  try {
    v = new org.osgi.framework.Version(version)
  } catch (e) {
    // invalid version encountered
    return version
  }
  def qualifier = v.qualifier
  
  if (qualifier == 'SNAPSHOT') {
    // SNAPSHOT version
    "${v.major}.${v.minor}.${v.micro}-SNAPSHOT"
  }
  else if (qualifier == 'release') {
    // release version -> omit qualifier
    "${v.major}.${v.minor}.${v.micro}"
  }
  else {
    // leave version as-is
    version
  }
}
